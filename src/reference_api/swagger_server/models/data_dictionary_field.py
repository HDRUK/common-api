# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class DataDictionaryField(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, label: str=None, type: str=None, description: str=None, constraints: str=None):  # noqa: E501
        """DataDictionaryField - a model defined in Swagger

        :param name: The name of this DataDictionaryField.  # noqa: E501
        :type name: str
        :param label: The label of this DataDictionaryField.  # noqa: E501
        :type label: str
        :param type: The type of this DataDictionaryField.  # noqa: E501
        :type type: str
        :param description: The description of this DataDictionaryField.  # noqa: E501
        :type description: str
        :param constraints: The constraints of this DataDictionaryField.  # noqa: E501
        :type constraints: str
        """
        self.swagger_types = {
            'name': str,
            'label': str,
            'type': str,
            'description': str,
            'constraints': str
        }

        self.attribute_map = {
            'name': 'name',
            'label': 'label',
            'type': 'type',
            'description': 'description',
            'constraints': 'constraints'
        }
        self._name = name
        self._label = label
        self._type = type
        self._description = description
        self._constraints = constraints

    @classmethod
    def from_dict(cls, dikt) -> 'DataDictionaryField':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The data_dictionary_field of this DataDictionaryField.  # noqa: E501
        :rtype: DataDictionaryField
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this DataDictionaryField.


        :return: The name of this DataDictionaryField.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this DataDictionaryField.


        :param name: The name of this DataDictionaryField.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def label(self) -> str:
        """Gets the label of this DataDictionaryField.


        :return: The label of this DataDictionaryField.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label: str):
        """Sets the label of this DataDictionaryField.


        :param label: The label of this DataDictionaryField.
        :type label: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501

        self._label = label

    @property
    def type(self) -> str:
        """Gets the type of this DataDictionaryField.


        :return: The type of this DataDictionaryField.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this DataDictionaryField.


        :param type: The type of this DataDictionaryField.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def description(self) -> str:
        """Gets the description of this DataDictionaryField.


        :return: The description of this DataDictionaryField.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this DataDictionaryField.


        :param description: The description of this DataDictionaryField.
        :type description: str
        """

        self._description = description

    @property
    def constraints(self) -> str:
        """Gets the constraints of this DataDictionaryField.


        :return: The constraints of this DataDictionaryField.
        :rtype: str
        """
        return self._constraints

    @constraints.setter
    def constraints(self, constraints: str):
        """Sets the constraints of this DataDictionaryField.


        :param constraints: The constraints of this DataDictionaryField.
        :type constraints: str
        """

        self._constraints = constraints
