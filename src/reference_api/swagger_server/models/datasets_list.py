# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.dataset_id import DatasetId  # noqa: F401,E501
from swagger_server import util


class DatasetsList(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, datasets: List[DatasetId]=None):  # noqa: E501
        """DatasetsList - a model defined in Swagger

        :param datasets: The datasets of this DatasetsList.  # noqa: E501
        :type datasets: List[DatasetId]
        """
        self.swagger_types = {
            'datasets': List[DatasetId]
        }

        self.attribute_map = {
            'datasets': 'datasets'
        }
        self._datasets = datasets

    @classmethod
    def from_dict(cls, dikt) -> 'DatasetsList':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The datasets_list of this DatasetsList.  # noqa: E501
        :rtype: DatasetsList
        """
        return util.deserialize_model(dikt, cls)

    @property
    def datasets(self) -> List[DatasetId]:
        """Gets the datasets of this DatasetsList.


        :return: The datasets of this DatasetsList.
        :rtype: List[DatasetId]
        """
        return self._datasets

    @datasets.setter
    def datasets(self, datasets: List[DatasetId]):
        """Sets the datasets of this DatasetsList.


        :param datasets: The datasets of this DatasetsList.
        :type datasets: List[DatasetId]
        """
        if datasets is None:
            raise ValueError("Invalid value for `datasets`, must not be `None`")  # noqa: E501

        self._datasets = datasets
