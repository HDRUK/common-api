# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.dcat_metadata_publisher import DCATMetadataPublisher  # noqa: F401,E501
from swagger_server import util


class DCATMetadata(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, title: str=None, description: str=None, creator: str=None, contact_point: str=None, publisher: DCATMetadataPublisher=None, license: str=None, version_info: str=None, additional_properties: object=None):  # noqa: E501
        """DCATMetadata - a model defined in Swagger

        :param id: The id of this DCATMetadata.  # noqa: E501
        :type id: str
        :param title: The title of this DCATMetadata.  # noqa: E501
        :type title: str
        :param description: The description of this DCATMetadata.  # noqa: E501
        :type description: str
        :param creator: The creator of this DCATMetadata.  # noqa: E501
        :type creator: str
        :param contact_point: The contact_point of this DCATMetadata.  # noqa: E501
        :type contact_point: str
        :param publisher: The publisher of this DCATMetadata.  # noqa: E501
        :type publisher: DCATMetadataPublisher
        :param license: The license of this DCATMetadata.  # noqa: E501
        :type license: str
        :param version_info: The version_info of this DCATMetadata.  # noqa: E501
        :type version_info: str
        :param additional_properties: The additional_properties of this DCATMetadata.  # noqa: E501
        :type additional_properties: object
        """
        self.swagger_types = {
            'id': str,
            'title': str,
            'description': str,
            'creator': str,
            'contact_point': str,
            'publisher': DCATMetadataPublisher,
            'license': str,
            'version_info': str,
            'additional_properties': object
        }

        self.attribute_map = {
            'id': 'id',
            'title': 'title',
            'description': 'description',
            'creator': 'creator',
            'contact_point': 'contactPoint',
            'publisher': 'publisher',
            'license': 'license',
            'version_info': 'versionInfo',
            'additional_properties': 'additionalProperties'
        }
        self._id = id
        self._title = title
        self._description = description
        self._creator = creator
        self._contact_point = contact_point
        self._publisher = publisher
        self._license = license
        self._version_info = version_info
        self._additional_properties = additional_properties

    @classmethod
    def from_dict(cls, dikt) -> 'DCATMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DCAT_metadata of this DCATMetadata.  # noqa: E501
        :rtype: DCATMetadata
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this DCATMetadata.


        :return: The id of this DCATMetadata.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this DCATMetadata.


        :param id: The id of this DCATMetadata.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def title(self) -> str:
        """Gets the title of this DCATMetadata.


        :return: The title of this DCATMetadata.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this DCATMetadata.


        :param title: The title of this DCATMetadata.
        :type title: str
        """

        self._title = title

    @property
    def description(self) -> str:
        """Gets the description of this DCATMetadata.


        :return: The description of this DCATMetadata.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this DCATMetadata.


        :param description: The description of this DCATMetadata.
        :type description: str
        """

        self._description = description

    @property
    def creator(self) -> str:
        """Gets the creator of this DCATMetadata.


        :return: The creator of this DCATMetadata.
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator: str):
        """Sets the creator of this DCATMetadata.


        :param creator: The creator of this DCATMetadata.
        :type creator: str
        """

        self._creator = creator

    @property
    def contact_point(self) -> str:
        """Gets the contact_point of this DCATMetadata.


        :return: The contact_point of this DCATMetadata.
        :rtype: str
        """
        return self._contact_point

    @contact_point.setter
    def contact_point(self, contact_point: str):
        """Sets the contact_point of this DCATMetadata.


        :param contact_point: The contact_point of this DCATMetadata.
        :type contact_point: str
        """

        self._contact_point = contact_point

    @property
    def publisher(self) -> DCATMetadataPublisher:
        """Gets the publisher of this DCATMetadata.


        :return: The publisher of this DCATMetadata.
        :rtype: DCATMetadataPublisher
        """
        return self._publisher

    @publisher.setter
    def publisher(self, publisher: DCATMetadataPublisher):
        """Sets the publisher of this DCATMetadata.


        :param publisher: The publisher of this DCATMetadata.
        :type publisher: DCATMetadataPublisher
        """

        self._publisher = publisher

    @property
    def license(self) -> str:
        """Gets the license of this DCATMetadata.


        :return: The license of this DCATMetadata.
        :rtype: str
        """
        return self._license

    @license.setter
    def license(self, license: str):
        """Sets the license of this DCATMetadata.


        :param license: The license of this DCATMetadata.
        :type license: str
        """

        self._license = license

    @property
    def version_info(self) -> str:
        """Gets the version_info of this DCATMetadata.


        :return: The version_info of this DCATMetadata.
        :rtype: str
        """
        return self._version_info

    @version_info.setter
    def version_info(self, version_info: str):
        """Sets the version_info of this DCATMetadata.


        :param version_info: The version_info of this DCATMetadata.
        :type version_info: str
        """

        self._version_info = version_info

    @property
    def additional_properties(self) -> object:
        """Gets the additional_properties of this DCATMetadata.


        :return: The additional_properties of this DCATMetadata.
        :rtype: object
        """
        return self._additional_properties

    @additional_properties.setter
    def additional_properties(self, additional_properties: object):
        """Sets the additional_properties of this DCATMetadata.


        :param additional_properties: The additional_properties of this DCATMetadata.
        :type additional_properties: object
        """

        self._additional_properties = additional_properties
