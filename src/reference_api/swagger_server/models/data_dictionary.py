# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.data_dictionary_field import DataDictionaryField  # noqa: F401,E501
from swagger_server.models.data_dictionary_lookup import DataDictionaryLookup  # noqa: F401,E501
from swagger_server import util


class DataDictionary(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, fields: List[DataDictionaryField]=None, lookups: Dict[str, DataDictionaryLookup]=None):  # noqa: E501
        """DataDictionary - a model defined in Swagger

        :param id: The id of this DataDictionary.  # noqa: E501
        :type id: str
        :param fields: The fields of this DataDictionary.  # noqa: E501
        :type fields: List[DataDictionaryField]
        :param lookups: The lookups of this DataDictionary.  # noqa: E501
        :type lookups: Dict[str, DataDictionaryLookup]
        """
        self.swagger_types = {
            'id': str,
            'fields': List[DataDictionaryField],
            'lookups': Dict[str, DataDictionaryLookup]
        }

        self.attribute_map = {
            'id': 'id',
            'fields': 'fields',
            'lookups': 'lookups'
        }
        self._id = id
        self._fields = fields
        self._lookups = lookups

    @classmethod
    def from_dict(cls, dikt) -> 'DataDictionary':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The data_dictionary of this DataDictionary.  # noqa: E501
        :rtype: DataDictionary
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this DataDictionary.


        :return: The id of this DataDictionary.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this DataDictionary.


        :param id: The id of this DataDictionary.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def fields(self) -> List[DataDictionaryField]:
        """Gets the fields of this DataDictionary.


        :return: The fields of this DataDictionary.
        :rtype: List[DataDictionaryField]
        """
        return self._fields

    @fields.setter
    def fields(self, fields: List[DataDictionaryField]):
        """Sets the fields of this DataDictionary.


        :param fields: The fields of this DataDictionary.
        :type fields: List[DataDictionaryField]
        """

        self._fields = fields

    @property
    def lookups(self) -> Dict[str, DataDictionaryLookup]:
        """Gets the lookups of this DataDictionary.


        :return: The lookups of this DataDictionary.
        :rtype: Dict[str, DataDictionaryLookup]
        """
        return self._lookups

    @lookups.setter
    def lookups(self, lookups: Dict[str, DataDictionaryLookup]):
        """Sets the lookups of this DataDictionary.


        :param lookups: The lookups of this DataDictionary.
        :type lookups: Dict[str, DataDictionaryLookup]
        """

        self._lookups = lookups
